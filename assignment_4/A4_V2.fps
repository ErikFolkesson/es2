! Global variables
indexed TransactionsR, JafterCAN_1, JafterCAN_2, JafterX, JafterD;
tasks Trans1, Trans2, Trans3;

system SensorActuatorA {
    declarations {
        indexed T, C, J, R, W, utilization;
        priority P;

        tasks trans1_sense, trans1_act, P1, P2, P3;
    }

    initialise {
        T[trans1_sense] = 10;
        T[trans1_act] = 10;
        T[P1] = 5;
        T[P2] = 15;
        T[P3] = 50;

        ! Priority is determined using RM.
        P[trans1_sense] = 2;
        P[trans1_act] = 3;
        P[P1] = 1;
        P[P2] = 4;
        P[P3] = 5;

        C[trans1_sense] = 1;
        C[trans1_act] = 1;
        C[P1] = 1;
        C[P2] = 2;
        C[P3] = 1;

        J[P1] = 0;
        J[P2] = 2;
        J[P3] = 5;
    }

    formulas {
    ! Inherit jitter from previous the CAN bus in the transaction
    J[trans1_act] = JafterCAN_2[Trans1];

    ! Calculate the response-times
    W[i] = C[i] + sigma(hp, ceiling((W[i]+J[j])/T[j]) * C[j]);
    R[i] = W[i] + J[i];

    utilization[i] = sigma(all, C[j]/T[j]);

    ! Store response-time either as
    ! * jitter to be inherited by a successor task in the transaction, or
    ! * response-time for transaction (if last task in transaction).
    JafterX[Trans1] = R[trans1_sense];
    TransactionsR[Trans1] = R[trans1_act];
  }
}

system SensorActuatorB {
    declarations {
        indexed T, C, J, R, W, utilization;
        priority P;

        tasks trans2_sense, trans2_act, P1, P2, P3;
    }

    initialise {
        T[trans2_sense] = 10;
        T[trans2_act] = 10;
        T[P1] = 5;
        T[P2] = 15;
        T[P3] = 50;

        ! Priority is determined using RM.
        P[trans2_sense] = 2;
        P[trans2_act] = 3;
        P[P1] = 1;
        P[P2] = 4;
        P[P3] = 5;

        C[trans2_sense] = 1;
        C[trans2_act] = 1;
        C[P1] = 1;
        C[P2] = 2;
        C[P3] = 1;

        J[P1] = 0;
        J[P2] = 2;
        J[P3] = 5;
    }

    formulas {
    ! Inherit jitter from previous the CAN bus in the transaction
    J[trans2_act] = JafterCAN_2[Trans2];

    ! Calculate the response-times
    W[i] = C[i] + sigma(hp, ceiling((W[i]+J[j])/T[j]) * C[j]);
    R[i] = W[i] + J[i];

    utilization[i] = sigma(all, C[j]/T[j]);

    ! Store response-time either as
    ! * jitter to be inherited by a successor task in the transaction, or
    ! * response-time for transaction (if last task in transaction).
    JafterX[Trans2] = R[trans2_sense];
    TransactionsR[Trans2] = R[trans2_act];
  }
}

system SensorActuatorC {
    declarations {
        indexed T, C, J, R, W, utilization;
        priority P;

        tasks trans3_sense, trans3_act, P1, P2, P3;
    }

    initialise {
        T[trans3_sense] = 20;
        T[trans3_act] = 20;
        T[P1] = 5;
        T[P2] = 15;
        T[P3] = 50;

        ! Priority is determined using RM.
        P[trans3_sense] = 3;
        P[trans3_act] = 4;
        P[P1] = 1;
        P[P2] = 2;
        P[P3] = 5;

        C[trans3_sense] = 2;
        C[trans3_act] = 1;
        C[P1] = 1;
        C[P2] = 2;
        C[P3] = 1;

        J[P1] = 0;
        J[P2] = 2;
        J[P3] = 5;
    }

    formulas {
    ! Inherit jitter from previous the CAN bus in the transaction
    J[trans3_act] = JafterCAN_2[Trans3];

    ! Calculate the response-times
    W[i] = C[i] + sigma(hp, ceiling((W[i]+J[j])/T[j]) * C[j]);
    R[i] = W[i] + J[i];

    utilization[i] = sigma(all, C[j]/T[j]);

    ! Store response-time either as
    ! * jitter to be inherited by a successor task in the transaction, or
    ! * response-time for transaction (if last task in transaction).
    JafterX[Trans3] = R[trans3_sense];
    TransactionsR[Trans3] = R[trans3_act];
  }
}

system CANBus {
    declarations {
        indexed T, C, J, R, W, msg_size, utilization;
        scalar bit_per_millisecond;
        priority P;

        tasks trans1_sense, trans1_act, trans2_sense, trans2_act, trans3_sense, trans3_act;
    }

    initialise {
        T[trans1_sense] = 10;
        T[trans1_act] = 10;

        T[trans2_sense] = 10;
        T[trans2_act] = 10;

        T[trans3_sense] = 20;
        T[trans3_act] = 20;

        P[trans1_sense] = 1;
        P[trans1_act] = 2;

        P[trans2_sense] = 3;
        P[trans2_act] = 4;

        P[trans3_sense] = 5;
        P[trans3_act] = 6;
    }

    formulas {
        ! Inherit jitter from sensing on the corresponding sensor-actuator
        J[trans1_sense] = JafterX[Trans1];
        J[trans2_sense] = JafterX[Trans2];
        J[trans3_sense] = JafterX[Trans3];

        J[trans1_act] = JafterD[Trans1];
        J[trans2_act] = JafterD[Trans2];
        J[trans3_act] = JafterD[Trans3];

        ! Time in ms to send one bit at 75kbps
        bit_per_millisecond = 1000/75000;

        msg_size[trans1_sense] = 2 * 8;
        msg_size[trans1_act] = 1 * 8;
        C[trans1_sense] = msg_size[trans1_sense] * bit_per_millisecond;
        C[trans1_act] = msg_size[trans1_act] * bit_per_millisecond;

        msg_size[trans2_sense] = 4 * 8;
        msg_size[trans2_act] = 2 * 8;
        C[trans2_sense] = msg_size[trans2_sense] * bit_per_millisecond;
        C[trans2_act] = msg_size[trans2_act] * bit_per_millisecond;

        msg_size[trans3_sense] = 4 * 8;
        msg_size[trans3_act] = 4 * 8;
        C[trans3_sense] = msg_size[trans3_sense] * bit_per_millisecond;
        C[trans3_act] = msg_size[trans3_act] * bit_per_millisecond;

        ! Calculate the response-times
        W[i] = C[i] + sigma(hp, ceiling((W[i]+J[j])/T[j]) * C[j]);
        R[i] = W[i] + J[i];

        utilization[i] = sigma(all, C[j]/T[j]);

        ! TODO: Rewrite so that it is correct!
        ! Store response-time either as
        ! * jitter to be inherited by a successor task in the transaction, or
        ! * response-time for transaction (if last task in transaction).
        JafterCAN_1[Trans1] = R[trans1_sense];
        JafterCAN_1[Trans2] = R[trans2_sense];
        JafterCAN_1[Trans3] = R[trans3_sense];

        JafterCAN_2[Trans1] = R[trans1_act];
        JafterCAN_2[Trans2] = R[trans2_act];
        JafterCAN_2[Trans3] = R[trans3_act];
    }
}

system ControlNodeD {
    declarations {
        indexed T, C, J, R, W, utilization;
        priority P;

        tasks trans1_calc, trans2_calc, trans3_calc;
    }

    initialise {
        T[trans1_calc] = 10;
        T[trans2_calc] = 10;
        T[trans3_calc] = 20;

        P[trans1_calc] = 1;
        P[trans2_calc] = 2;
        P[trans3_calc] = 3;

        C[trans1_calc] = 1;
        C[trans2_calc] = 2;
        C[trans3_calc] = 4;
    }

    formulas {
    ! Inherit jitter from sensing on the corresponding sensor-actuator
    J[trans1_calc] = JafterCAN_1[Trans1];
    J[trans2_calc] = JafterCAN_1[Trans2];
    J[trans3_calc] = JafterCAN_1[Trans3];

    ! Calculate the response-times
    W[i] = C[i] + sigma(hp, ceiling((W[i]+J[j])/T[j]) * C[j]);
    R[i] = W[i] + J[i];

    utilization[i] = sigma(all, C[j]/T[j]);

    ! Store response-time either as jitter to be inherited by a successor task in the transaction
    JafterD[Trans1] = R[trans1_calc];
    JafterD[Trans2] = R[trans2_calc];
    JafterD[Trans3] = R[trans3_calc];
  }
}

system global {
  ! Declare a variable R with the same structure as the global TransactionsR
  declarations {
    indexed R;
    tasks Trans1, Trans2, Trans3;
  }

  ! Initialise global variables
  initialise {
    TransactionsR[i] = 0;
    JafterCAN_1[i] = 0;
    JafterCAN_2[i] = 0;
    JafterX[i] = 0;
    JafterD[i] = 0;
  }

  formulas {
    ! This copying is necessary to print the final values of the TransactionsR
    ! variable :(

    R[i] = TransactionsR[i];
  }
}